# https://www.practicepython.org/exercise/2014/06/06/17-decode-a-web-page.html
# Create a program that will play the “cows and bulls” game with the user. The game works like this:
# Randomly generate a 4-digit number. Ask the user to guess a 4-digit number.
# For every digit that the user guessed correctly in the correct place, they have a “cow”.
# For every digit the user guessed correctly in the wrong place is a “bull.”
# Every time the user makes a guess, tell them how many “cows” and “bulls” they have.
# Once the user guesses the correct number, the game is over.
# Keep track of the number of guesses the user makes throughout teh game and tell the user at the end.
# Say the number generated by the computer is 1038. An example interaction could look like this:
# Welcome to the Cows and Bulls Game! 
#   Enter a number: 
#   >>> 1234
#   2 cows, 0 bulls
#   >>> 1256
#   1 cow, 1 bull
#   ...
# Until the user guesses the number.

import random
import string


class CowAndBulls:

    def __init__(self, pw=False) -> None:
        self.pw = pw 
        if not pw:
            self.func_generate_pw()

    def func_generate_pw(self, n=4) -> None:
        """
        Generate pw with length n
        """
        self.pw = ''.join(random.choice(string.digits) for _ in range(n))

    def func_set_pw(self, pw: str) -> None:
        """
        Set pw
        """
        self.pw = pw

    def func_game(self, test=False) -> None:
        """
        Play game until win
        """
        res = ""
        data = {
            "cows": 0,
            "bulls": 0,
            "rounds": 0
        }
        while res != "c"*len(self.pw):
            if test:
                print(f"pw:\t{self.pw}")
            else:
                print(f"pw:\t{'*'*len(self.pw)}")
            hint = input("hint:\t")    
            res = self.func_check_hint(hint)
            data["cows"] = res.count("c")
            data["bulls"] = res.count("b")
            data["rounds"] += 1
            if test:
                print(f"res:\t{res}")    
            if data["cows"] == len(res):
                print(f"*** WIN! ***\n(rounds: {data['rounds']})")
            else:
                print(f"cows:\t{data['cows']}\nbulls:\t{data['bulls']}")

    def func_check_hint(self, hint) -> str:
        """
        Return result hint
        """
        if len(hint) > len(self.pw):
            return "pw is too long"
        pw = list(self.pw)
        hint = list(hint)
        res = list("0"*len(self.pw))
        text_hint = "hint_found"
        text_pw = "pw_found"
        for n, (i, p) in enumerate(zip(hint, pw)):
            if i == p:
                res[n] = "c"
                hint[n] = text_hint
                pw[n] = text_pw
        for n, i in enumerate(hint):
            if i in pw:
                pos = pw.index(i)
                res[n] = "b"
                hint[n] = text_hint
                pw[pos] = text_pw
        return "".join(res)

    def func_new_game(self, pw=False, n=4, test=False) -> None:
        """
        Play new game
        """
        if not pw:
            self.func_generate_pw(n=n)
        else:
            self.func_set_pw(pw)
        self.func_game(test=test)


if __name__ == "__main__":
    # test pw
    game = CowAndBulls()
    print(f"pw: {game.pw}")
    game.func_set_pw("keki")
    print(f"pw: {game.pw}")
    game.func_generate_pw(13)
    print(f"pw: {game.pw}")
    game.func_generate_pw()
    print(f"pw: {game.pw}")

    #test game
    game.func_game(test=True)
    game.func_new_game(test=True)
    game.func_new_game(n=5, test=True)
    game.func_new_game(pw="pw", test=True)
